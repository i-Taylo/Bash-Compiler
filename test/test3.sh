#!/bin/bash

# THIS CODE GENERATED BY AI

# Enable memoization by declaring an associative array for memoized Fibonacci values
declare -A fib_cache

# Recursive Fibonacci with memoization
fib() {
    local n=$1

    # Check if value is already computed and stored in cache
    if [[ -n "${fib_cache[$n]}" ]]; then
        echo "${fib_cache[$n]}"
        return
    fi

    # Base cases
    if (( n <= 1 )); then
        fib_cache[$n]=$n
        echo "$n"
        return
    fi

    # Recursive computation
    local result=$(( $(fib $((n - 1))) + $(fib $((n - 2))) ))

    # Cache result for future use
    fib_cache[$n]=$result
    echo "$result"
}

# Prime checking function
is_prime() {
    local num=$1
    if (( num < 2 )); then
        echo 0
        return
    fi
    for (( i = 2; i * i <= num; i++ )); do
        if (( num % i == 0 )); then
            echo 0
            return
        fi
    done
    echo 1
}

# Complex operation: Calculate Fibonacci and check primality for a sequence
complex_operation() {
    local limit=$1
    for (( i = 1; i <= limit; i++ )); do
        local fib_result=$(fib "$i")
        local prime_check=$(is_prime "$fib_result")

        # Display results
        echo "Fibonacci($i) = $fib_result | Prime: $((prime_check == 1 ? "Yes" : "No"))"

        # Progress bar
        printf "["
        for (( j = 0; j < i; j++ )); do
            printf "="
        done
        for (( j = i; j < limit; j++ )); do
            printf " "
        done
        printf "] %d%%\r" $(( i * 100 / limit ))
        sleep 0.1
    done
    echo
}

# Set Fibonacci calculation limit for the complex test
complex_operation 20
